name: Release

on:
  push:
    tags: ['v*.*.*']

env:
  IMAGE_NAME: podmortem-ai-interface
  DOCKERFILE: ./src/main/docker/Dockerfile.native
  DEP_STAGE: dependencies

jobs:
  warm-cache:
    runs-on: [self-hosted, linux]
    permissions: {contents: read, packages: write}
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_PAT }}

      - name: Build deps layer
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ env.DOCKERFILE }}
          target: ${{ env.DEP_STAGE }}
          push: true
          platforms: linux/amd64
          cache-from: type=gha,scope=deps
          cache-to: |
            type=gha,mode=max,scope=deps
            type=registry,ref=ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:deps-cache,mode=max
          tags: ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:deps-cache
          build-args: GITHUB_USER=${{ github.actor }}
          secrets: GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}

  build-arch:
    needs: warm-cache
    runs-on: ${{ matrix.runner }}
    permissions: 
      contents: read
      packages: write
      id-token: write
      attestations: write
    strategy:
      matrix:
        include:
          - arch: amd64
            platform: linux/amd64
            runner: [self-hosted, linux]
          - arch: arm64
            platform: linux/arm64
            runner: ubuntu-22.04-arm
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_PAT }}

      - name: Build & push ${{ matrix.arch }}
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ env.DOCKERFILE }}
          platforms: ${{ matrix.platform }}
          push: true
          cache-from: |
            type=gha,scope=deps
            type=gha,scope=build-${{ matrix.arch }}
          cache-to: type=gha,mode=max,scope=build-${{ matrix.arch }}
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${{ matrix.arch }}
          build-args: GITHUB_USER=${{ github.actor }}
          secrets: GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}

      - name: Generate SLSA attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

  manifest:
    needs: build-arch
    runs-on: [self-hosted, linux]
    permissions: 
      contents: read
      packages: write
      id-token: write
      attestations: write
    steps:
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_PAT }}

      - name: Create manifest list
        id: manifest
        run: |
          for TAG in ${{ github.ref_name }} latest; do
            docker buildx imagetools create \
              -t ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${TAG} \
                ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-amd64 \
                ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-arm64
          done

          # Get the digest of the release manifest using docker inspect
          DIGEST=$(docker manifest inspect ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }} | jq -r '.digest // empty')
          if [ -z "$DIGEST" ]; then
            # Fallback: get digest from the registry API
            DIGEST=$(docker inspect ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }} --format='{{index .RepoDigests 0}}' | cut -d'@' -f2)
          fi
          echo "digest=$DIGEST" >> $GITHUB_OUTPUT
          echo "Release manifest digest: $DIGEST"

      - name: Generate SLSA attestation for release manifest
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.manifest.outputs.digest }}
          push-to-registry: true

  release-notes:
    needs: manifest
    runs-on: [self-hosted, linux]
    permissions: {contents: write}
    steps:
      - name: Generate GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          generate_release_notes: true
